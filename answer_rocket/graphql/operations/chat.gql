mutation AskChatQuestion(
  $copilotId: UUID!
  $question: String!
  $threadId: UUID
  $skipReportCache: Boolean
  $dryRunType: ChatDryRunType
  $modelOverrides: [ModelOverride]
  $indicatedSkills: [String]
  $history: [MessageHistoryInput!]
) {
  askChatQuestion(
    copilotId: $copilotId
    question: $question
    threadId: $threadId
    skipReportCache: $skipReportCache
    dryRunType: $dryRunType
    modelOverrides: $modelOverrides
    indicatedSkills: $indicatedSkills
    history: $history
  ) {
    id
    threadId
    answer {
      ...ChatResultFragment
    }
  }
}

mutation QueueChatQuestion(
  $threadId: UUID!
  $question: String!
  $skipCache: Boolean
  $modelOverrides: [ModelOverride]
  $indicatedSkills: [String]
  $history: [MessageHistoryInput!]
) {
  queueChatQuestion(
    threadId: $threadId
    question: $question
    skipCache: $skipCache
    modelOverrides: $modelOverrides
    indicatedSkills: $indicatedSkills
    history: $history
  ) {
    threadId
    id
  }
}

fragment ChatResultFragment on MaxChatResult {
  answerId
  answeredAt
  copilotSkillId
  hasFinished
  error
  isNewThread
  message
  reportResults {
    title
    reportName
    parameters {
      key
      values
      label
    }
    customPayload
  }
  threadId
  userId
}

mutation CancelChatQuestion($entryId: UUID!) {
  cancelChatQuestion(entryId: $entryId) {
    threadId
    id
  }
}

query ChatEntry($id: UUID!) {
  chatEntry(id: $id) {
    id
    threadId
    answer {
      ...ChatResultFragment
    }
    feedback
  }
}

query ChatThread($id: UUID!) {
  chatThread(id: $id) {
    id
    entryCount
    title
    copilotId
    entries {
      id
      threadId
      answer {
        ...ChatResultFragment
      }
    }
  }
}

mutation CreateChatThread($copilotId: UUID!) {
  createChatThread(copilotId: $copilotId) {
    id
    copilotId
  }
}
