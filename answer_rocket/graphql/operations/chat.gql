mutation AskChatQuestion(
  $copilotId: UUID!
  $question: String!
  $threadId: UUID
  $skipReportCache: Boolean
  $dryRunType: ChatDryRunType
  $modelOverrides: [ModelOverride]
  $indicatedSkills: [String]
  $history: [MessageHistoryInput!]
  $questionType: QuestionType
  $threadType: ThreadType
) {
  askChatQuestion(
    copilotId: $copilotId
    question: $question
    threadId: $threadId
    skipReportCache: $skipReportCache
    dryRunType: $dryRunType
    modelOverrides: $modelOverrides
    indicatedSkills: $indicatedSkills
    history: $history
    questionType: $questionType
    threadType: $threadType
  ) {
    id
    threadId
    answer {
      ...ChatResultFragment
    }
  }
}

mutation QueueChatQuestion(
  $threadId: UUID!
  $question: String!
  $skipCache: Boolean
  $modelOverrides: [ModelOverride]
  $indicatedSkills: [String]
  $history: [MessageHistoryInput!]
) {
  queueChatQuestion(
    threadId: $threadId
    question: $question
    skipCache: $skipCache
    modelOverrides: $modelOverrides
    indicatedSkills: $indicatedSkills
    history: $history
  ) {
    threadId
    id
  }
}

fragment ChatResultFragment on MaxChatResult {
  answerId
  threadId
  chatPipelineProfile
  generalDiagnostics
  answeredAt
  copilotSkillId
  hasFinished
  error
  isNewThread
  message
  reportResults {
    title
    reportName
    parameters {
      key
      values
      label
    }
    customPayload
    contentBlocks {
        id
        title
        layoutJson
    }
  }
  threadId
  userId
}

mutation CancelChatQuestion($entryId: UUID!) {
  cancelChatQuestion(entryId: $entryId) {
    threadId
    id
  }
}

query ChatEntry($id: UUID!) {
  chatEntry(id: $id) {
    id
    threadId
    question {
      askedAt
      nl
    }
    answer {
      ...ChatResultFragment
    }
    feedback
    user
    skillMemoryPayload
  }
}

query DataframesForEntry($entryId: UUID!) {
  chatEntry(id: $entryId) {
    id
    answer {
        reportResults {
            gzippedDataframesAndMetadata
        }
    }
  }
}

query ChatThread($id: UUID!) {
  chatThread(id: $id) {
    id
    entryCount
    title
    copilotId
    entries {
      id
      threadId
      answer {
        ...ChatResultFragment
      }
      skillMemoryPayload
    }
  }
}

query AllChatEntries($offset: Int, $limit: Int, $filters: JSON) {
  allChatEntries(offset: $offset, limit: $limit, filters: $filters) {
    id
    threadId
    question {
      askedAt
      nl
    }
    answer {
      ...ChatResultFragment
    }
    feedback
    user
  }
}

mutation CreateChatThread($copilotId: UUID!) {
  createChatThread(copilotId: $copilotId) {
    id
    copilotId
  }
}

mutation AddFeedback(
  $entryId: UUID!
  $feedbackType: FeedbackType!
  $message: String
) {
  addFeedback(entryId: $entryId, feedbackType: $feedbackType, message: $message)
}

query SkillMemory($entryId: UUID!) {
  skillMemory(entryId: $entryId)
}

mutation SetSkillMemory($entryId: UUID!, $skillMemoryPayload: JSON!) {
  setSkillMemory(entryId: $entryId, skillMemoryPayload: $skillMemoryPayload)
}

query GetChatArtifact($chatArtifactId: UUID!) {
  getChatArtifact(chatArtifactId: $chatArtifactId) {
    chatArtifactId
    name
    ownerUserId
    chatEntryId
    contentBlockId
  }
}

mutation CreateChatArtifact($chatArtifact: JSON!) {
  createChatArtifact(chatArtifact: $chatArtifact)
}

mutation DeleteChatArtifact($chatArtifactId: UUID!) {
  deleteChatArtifact(chatArtifactId: $chatArtifactId)
}
